name: dev-prod-job

on:
  push:
    branches: 
      - dev
      - main
  pull_request:
    paths-ignore:
      - 'docs/**'

  
jobs:
  # lint-and-test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: '3.8'
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #     - name: install flake8
  #       run: |
  #         python -m pip install flake8
  #     - name: lint code with flake8
  #       run: |
  #         flake8 code/model/train.py
  #     - name: Run tests with pytest
  #       run: pytest tests/
  experiment:
    runs-on: ubuntu-latest
    # needs: lint-and-test
    environment:
        name: dev
    steps:
    - name: Check out repo
      uses: actions/checkout@main
    - name: Use Python version 3.8
      uses: actions/setup-python@v3
      with:
        python-version: '3.8'
    - name: install requirements.txt
      run: |
        python -m pip install -r requirements.txt
    - name: Install az ml extension
      run: az extension add -n ml -y
    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Replace dataset.yml with env variable
      run: |
          sed "s/{{DATASETNAME}}/${{ vars.DATASETNAME }}/g" 
          sed "s/{{DBVERSION}}/${{ vars.DATASET_VERSION }}/g" > dataset.yml
    - name: check dataset list
      run: |
        echo "${{vars.DATASETNAME}}-${{vars.DATASET_VERSION}}"
        dataset_name=${{vars.DATASETNAME}}
        dataset_version=${{vars.DATASET_VERSION}}
        output=$(az ml data list --workspace-name ${{vars.MLWORKSPACE}} --resource-group ${{vars.RGNAME}} --output table)
        echo "Command Output:"
        echo "$output"
        if echo "$output" | grep -q "$dataset_name" && echo "$output" | grep "$dataset_name" | grep -q "$dataset_version"; then
          echo "Dataset '$dataset_name' with version '$dataset_version' exists."
        else
          echo "Dataset '$dataset_name' with version '$dataset_version' does not exist."
          echo "Dataset will be created"
          az ml data create --file dataset.yml --workspace-name ${{vars.MLWORKSPACE}} --resource-group ${{vars.RGNAME}}
        exit 1
        fi
        # az ml data show --name ${{vars.DATASETNAME}} --version ${{vars.DATASET_VERSION}} --workspace-name ${{vars.MLWORKSPACE}} --resource-group ${{vars.RGNAME}} --output table
        # az ml data list --name ${{vars.DATASETNAME}} --workspace-name ${{vars.MLWORKSPACE}} --resource-group ${{vars.RGNAME}} --output table
        # if az ml data list --workspace-name ${{vars.MLWORKSPACE}} --resource-group ${{vars.RGNAME}} --output table | grep -q "${{vars.DATASETNAME}}\s*${{vars.DATASET_VERSION}}"; then
        #   echo "Dataset  exists."
        # else
        #   echo "Dataset does not exist."
        #   exit 1
        # fi
        echo "table tablelst"
        # if az ml data show --name ${{vars.DATASETNAME}} --version ${{vars.DATASET_VERSION}} --workspace-name ${{vars.MLWORKSPACE}} --resource-group ${{vars.RGNAME}}; then
        #   echo "Dataset exists."
        # else
        #   echo "Dataset not found."
        # exit 1
        # fi
        # status=$(az ml data show --name ${{vars.DATASETNAME}} --version ${{vars.DATASET_VERSION}} --workspace-name ${{vars.MLWORKSPACE}} --resource-group ${{vars.RGNAME}} --debug)
        # echo "value of status is : $status"
        # if echo "$status" | grep -q "Asset with Asset ID was not found"; then
        #   echo "Error: The dataset with the specified name and version was not found."
        #   exit 3
        # fi
        # created_at=$(echo "$status" | jq -r '.creation_context.created_at')

        # echo "datecreate new: $created_at"
        # # echo "datecreate: $status.creation_context.created_at"
        # if [ -z "$created_at" ] || [ "$created_at" == "null" ]; then
        #   echo "The created_at value is null or empty."
          
        #   az ml data create --file dataset.yml --workspace-name ${{vars.MLWORKSPACE}} --resource-group ${{vars.RGNAME}}

        # else
        #   echo "The created_at value is: $created_at"
        # fi
      env:
          DATASET_NAME: ${{ vars.DATASETNAME }}
          DBVERSION: ${{vars.DATASET_VERSION}}
        # echo "file status= $status"
    # - name: Create dataset
    #   run: az ml data create --file dataset.yml --workspace-name ${{vars.MLWORKSPACE}} --resource-group ${{vars.RGNAME}}
    # - id: mljobid
    #   name: Run training job for dev
    #   run: |
    #     run_id=$(az ml job create --file code/job.yml --resource-group ${{vars.RGNAME}} --workspace-name ${{vars.MLWORKSPACE}} --query name -o tsv)
    #     echo "RUN_ID=$run_id" >> $GITHUB_ENV
    # - name: Wait for job completion
    #   run: |
    #       status=$(az ml job show --name ${{ env.RUN_ID }} --resource-group ${{vars.RGNAME}} --workspace-name ${{vars.MLWORKSPACE}} --query status -o tsv)
    #       while [ "$status" != "Completed" ]; do
    #         echo "Waiting for job to complete..."
    #         sleep 60
    #         status=$(az ml job show --name ${{ env.RUN_ID }} --resource-group ${{vars.RGNAME}} --workspace-name ${{vars.MLWORKSPACE}} --query status -o tsv)
    #       done
    #       echo "Job completed."
    # - name: register model in dev      
    #   run: |
    #     echo "runId :${{ env.RUN_ID }}"
    #     az ml model create --name sk-diabetes-model --type mlflow_model --path runs:/${{ env.RUN_ID }}/model  --resource-group rg-d-race-ds --workspace-name dev-ml-fleet-adder-mlw
    # - name: create endpoint dev
    #   run:  |
    #     az ml online-endpoint create -f ./endpoint.yml --resource-group rg-d-race-ds --workspace-name dev-ml-fleet-adder-mlw
    #     sleep 60
    # - name: deploy model to endpoint dev
    #   run:  az ml online-deployment create --name sklearn-deployment --endpoint diabetes-dev -f ./deployment.yml --resource-group rg-d-race-ds --workspace-name dev-ml-fleet-adder-mlw --all-traffic
  